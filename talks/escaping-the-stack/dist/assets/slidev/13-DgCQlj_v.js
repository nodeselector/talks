import{c as s,k as a,q as n,s as i,z as o,o as l,e,Z as r}from"../modules/vue--2rrS9jf.js";import{I as c}from"./default-DAz_qJor.js";import{b as f,a9 as t}from"../index-DZaC20iK.js";import{p as h,u as p,f as d}from"./context-BcuC4P__.js";import"../modules/shiki-BQ1XKe-f.js";const u=e("h2",null,"A parting note on escape analysis",-1),_=e("blockquote",null,[e("p",null,"Whether a Go value escapes or not is a function of the context in which it is used and the Go compiler’s escape analysis algorithm. It would be fragile and difficult to try to enumerate precisely when values escape: the algorithm itself is fairly sophisticated and changes between Go releases. For more details on how to identify which values escape and which do not, see the section on eliminating heap allocations.")],-1),m=e("ul",null,[e("li",null,[e("em",null,"A Guide to the Go Garbage Collector"),e("sup",{class:"footnote-ref"},[e("a",{href:"#fn1",id:"fnref1"},"[1]")])])],-1),g=e("hr",{class:"footnotes-sep"},null,-1),v=e("section",{class:"footnotes"},[e("ol",{class:"footnotes-list"},[e("li",{id:"fn1",class:"footnote-item"},[e("p",null,[e("a",{href:"https://tip.golang.org/doc/gc-guide#Where_Go_Values_Live",target:"_blank",rel:"noopener"},"https://tip.golang.org/doc/gc-guide#Where_Go_Values_Live"),r(),e("a",{href:"#fnref1",class:"footnote-backref"},"↩︎")])])])],-1),w={__name:"13",setup(G){return h(t),p(),(b,x)=>(l(),s(c,n(i(o(d)(o(t),12))),{default:a(()=>[u,_,m,g,v]),_:1},16))}},I=f(w,[["__file","/@slidev/slides/13.md"]]);export{I as default};
